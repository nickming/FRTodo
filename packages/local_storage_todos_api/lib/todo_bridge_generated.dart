// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class RustTodo {
  Future<void> initialize({required String path, dynamic hint});

  Stream<String> registerEventListener({dynamic hint});

  Future<String> queryAll({dynamic hint});

  Future<String> delete({required String todoId, dynamic hint});

  Future<String> save({required String todoData, dynamic hint});

  Future<String> clearCompleted({dynamic hint});

  Future<String> completeAll({required bool isCompletedValue, dynamic hint});
}

class RustTodoImpl extends FlutterRustBridgeBase<RustTodoWire>
    implements RustTodo {
  factory RustTodoImpl(ffi.DynamicLibrary dylib) =>
      RustTodoImpl.raw(RustTodoWire(dylib));

  RustTodoImpl.raw(RustTodoWire inner) : super(inner);

  Future<void> initialize({required String path, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_initialize(port, _api2wire_String(path)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "initialize",
          argNames: ["path"],
        ),
        argValues: [path],
        hint: hint,
      ));

  Stream<String> registerEventListener({dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_register_event_listener(port),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "register_event_listener",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<String> queryAll({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_query_all(port),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "query_all",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<String> delete({required String todoId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_delete(port, _api2wire_String(todoId)),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "delete",
          argNames: ["todoId"],
        ),
        argValues: [todoId],
        hint: hint,
      ));

  Future<String> save({required String todoData, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_save(port, _api2wire_String(todoData)),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "save",
          argNames: ["todoData"],
        ),
        argValues: [todoData],
        hint: hint,
      ));

  Future<String> clearCompleted({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_clear_completed(port),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "clear_completed",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<String> completeAll({required bool isCompletedValue, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_complete_all(port, isCompletedValue),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "complete_all",
          argNames: ["isCompletedValue"],
        ),
        argValues: [isCompletedValue],
        hint: hint,
      ));

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_bool(bool raw) {
    return raw ? 1 : 0;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class RustTodoWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustTodoWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustTodoWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_initialize(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_initialize(
      port_,
      path,
    );
  }

  late final _wire_initializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_initialize');
  late final _wire_initialize = _wire_initializePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_register_event_listener(
    int port_,
  ) {
    return _wire_register_event_listener(
      port_,
    );
  }

  late final _wire_register_event_listenerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_register_event_listener');
  late final _wire_register_event_listener =
      _wire_register_event_listenerPtr.asFunction<void Function(int)>();

  void wire_query_all(
    int port_,
  ) {
    return _wire_query_all(
      port_,
    );
  }

  late final _wire_query_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_query_all');
  late final _wire_query_all =
      _wire_query_allPtr.asFunction<void Function(int)>();

  void wire_delete(
    int port_,
    ffi.Pointer<wire_uint_8_list> todo_id,
  ) {
    return _wire_delete(
      port_,
      todo_id,
    );
  }

  late final _wire_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_delete');
  late final _wire_delete = _wire_deletePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_save(
    int port_,
    ffi.Pointer<wire_uint_8_list> todo_data,
  ) {
    return _wire_save(
      port_,
      todo_data,
    );
  }

  late final _wire_savePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_save');
  late final _wire_save = _wire_savePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_clear_completed(
    int port_,
  ) {
    return _wire_clear_completed(
      port_,
    );
  }

  late final _wire_clear_completedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_clear_completed');
  late final _wire_clear_completed =
      _wire_clear_completedPtr.asFunction<void Function(int)>();

  void wire_complete_all(
    int port_,
    bool is_completed_value,
  ) {
    return _wire_complete_all(
      port_,
      is_completed_value ? 1 : 0,
    );
  }

  late final _wire_complete_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint8)>>(
          'wire_complete_all');
  late final _wire_complete_all =
      _wire_complete_allPtr.asFunction<void Function(int, int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
